import { useState } from "react";
import { Plus, Settings, ArrowLeft, Play, Pause, Trash2, BarChart3, MessageSquare, Smartphone } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Switch } from "@/components/ui/switch";

interface MarketingTriggersProps {
  onBack: () => void;
}

interface Trigger {
  id: string;
  name: string;
  triggerType: string;
  conditions: string;
  messageTemplate: string;
  channel: string;
  isActive: boolean;
  sentCount: number;
  openRate: number;
  clickRate: number;
  conversionRate: number;
  createdAt: string;
}

interface TriggerFormData {
  name: string;
  triggerType: string;
  conditions: string;
  messageTemplate: string;
  channel: string;
}

export default function MarketingTriggers({ onBack }: MarketingTriggersProps) {
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showResultsView, setShowResultsView] = useState(false);
  const [formData, setFormData] = useState<TriggerFormData>({
    name: '',
    triggerType: '',
    conditions: '',
    messageTemplate: '',
    channel: ''
  });

  // Sample triggers data
  const [triggers] = useState<Trigger[]>([
    {
      id: "1",
      name: "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤",
      triggerType: "No orders in 30 days",
      conditions: "–û—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è > 30 –¥–Ω—ñ–≤",
      messageTemplate: "–ü—Ä–∏–≤—ñ—Ç! –°—É–º—É—î–º–æ –∑–∞ —Ç–æ–±–æ—é üòä –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ –∑–Ω–∏–∂–∫–∞ 15% –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
      channel: "Push",
      isActive: true,
      sentCount: 45,
      openRate: 68.5,
      clickRate: 12.3,
      conversionRate: 8.7,
      createdAt: "2024-01-10"
    },
    {
      id: "2", 
      name: "–ü—Ä–µ–º—ñ—É–º –∫–ª—ñ—î–Ω—Ç–∏",
      triggerType: "High spender",
      conditions: "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å > ‚Ç¥5000",
      messageTemplate: "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ—Ä–Ω—ñ—Å—Ç—å! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –¥–æ—Å—Ç–∞–≤–∫—É: PREMIUM2024",
      channel: "SMS",
      isActive: true,
      sentCount: 23,
      openRate: 89.2,
      clickRate: 34.8,
      conversionRate: 26.1,
      createdAt: "2024-01-05"
    },
    {
      id: "3",
      name: "–í—ñ—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
      triggerType: "New user",
      conditions: "–ü–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      messageTemplate: "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û—Ç—Ä–∏–º–∞–π—Ç–µ 20% –∑–Ω–∏–∂–∫—É –Ω–∞ –¥—Ä—É–≥–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ–¥–æ–º: WELCOME20",
      channel: "Push",
      isActive: false,
      sentCount: 78,
      openRate: 72.4,
      clickRate: 18.9,
      conversionRate: 15.4,
      createdAt: "2023-12-15"
    }
  ]);

  const getChannelIcon = (channel: string) => {
    return channel === "SMS" ? <Smartphone className="w-4 h-4" /> : <MessageSquare className="w-4 h-4" />;
  };

  const getStatusColor = (isActive: boolean) => {
    return isActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800";
  };

  const handleCreateTrigger = () => {
    // In real app, this would submit to backend
    console.log("Creating trigger:", formData);
    setShowCreateModal(false);
    setFormData({ name: '', triggerType: '', conditions: '', messageTemplate: '', channel: '' });
  };

  if (showResultsView) {
    return (
      <div className="p-8 bg-gray-50 min-h-screen">
        {/* Results Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => setShowResultsView(false)}
              className="flex items-center space-x-2"
              data-testid="btn-back-results"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>–ù–∞–∑–∞–¥ –¥–æ —Ç—Ä–∏–≥–µ—Ä—ñ–≤</span>
            </Button>
            <div className="flex items-center space-x-3">
              <BarChart3 className="w-8 h-8 text-uklon-yellow" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900" data-testid="results-title">
                  –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞–º–ø–∞–Ω—ñ–π
                </h1>
                <p className="text-sm text-gray-600">
                  –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö —Ç—Ä–∏–≥–µ—Ä—ñ–≤
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Campaign Results */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="total-campaigns">
                  {triggers.length}
                </p>
                <p className="text-sm text-gray-600">–í—Å—å–æ–≥–æ –∫–∞–º–ø–∞–Ω—ñ–π</p>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="total-sent">
                  {triggers.reduce((sum, t) => sum + t.sentCount, 0)}
                </p>
                <p className="text-sm text-gray-600">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="avg-open-rate">
                  {(triggers.reduce((sum, t) => sum + t.openRate, 0) / triggers.length).toFixed(1)}%
                </p>
                <p className="text-sm text-gray-600">–í—ñ–¥–∫—Ä–∏–≤–∞–Ω—ñ—Å—Ç—å</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-900" data-testid="avg-conversion">
                  {(triggers.reduce((sum, t) => sum + t.conversionRate, 0) / triggers.length).toFixed(1)}%
                </p>
                <p className="text-sm text-gray-600">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Detailed Results Table */}
        <Card>
          <CardHeader>
            <CardTitle>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω—ñ–π</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full" data-testid="campaign-results-table">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-3 px-4 font-medium text-gray-600">–ù–∞–∑–≤–∞ –∫–∞–º–ø–∞–Ω—ñ—ó</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-600">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-600">–í—ñ–¥–∫—Ä–∏–≤–∞–Ω—ñ—Å—Ç—å</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-600">CTR</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-600">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-600">ROI</th>
                  </tr>
                </thead>
                <tbody>
                  {triggers.map((trigger) => (
                    <tr key={trigger.id} className="border-b hover:bg-gray-50" data-testid={`result-row-${trigger.id}`}>
                      <td className="py-4 px-4 font-medium text-gray-900">{trigger.name}</td>
                      <td className="py-4 px-4 text-gray-900">{trigger.sentCount}</td>
                      <td className="py-4 px-4 text-gray-900">{trigger.openRate}%</td>
                      <td className="py-4 px-4 text-gray-900">{trigger.clickRate}%</td>
                      <td className="py-4 px-4 text-gray-900">{trigger.conversionRate}%</td>
                      <td className="py-4 px-4">
                        <Badge variant="secondary">
                          +{Math.round(trigger.conversionRate * 15)}%
                        </Badge>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Button
            variant="outline"
            onClick={onBack}
            className="flex items-center space-x-2"
            data-testid="btn-back-triggers"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>–ù–∞–∑–∞–¥</span>
          </Button>
          <div className="flex items-center space-x-3">
            <Settings className="w-8 h-8 text-uklon-yellow" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900" data-testid="triggers-title">
                –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ñ —Ç—Ä–∏–≥–µ—Ä–∏
              </h1>
              <p className="text-sm text-gray-600">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó –¥–ª—è –∑–∞–ª—É—á–µ–Ω–Ω—è —Ç–∞ —É—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
              </p>
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <Button
            variant="outline"
            onClick={() => setShowResultsView(true)}
            className="flex items-center space-x-2"
            data-testid="btn-view-results"
          >
            <BarChart3 className="w-4 h-4" />
            <span>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏</span>
          </Button>
          
          <Button
            onClick={() => setShowCreateModal(true)}
            className="flex items-center space-x-2 bg-uklon-yellow text-uklon-dark hover:bg-uklon-yellow/90"
            data-testid="btn-create-trigger"
          >
            <Plus className="w-4 h-4" />
            <span>–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∏–≥–µ—Ä</span>
          </Button>
        </div>
      </div>

      {/* Active Triggers */}
      <div className="grid grid-cols-1 gap-6">
        {triggers.map((trigger) => (
          <Card key={trigger.id} data-testid={`trigger-card-${trigger.id}`}>
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {getChannelIcon(trigger.channel)}
                  <div>
                    <CardTitle className="text-lg">{trigger.name}</CardTitle>
                    <p className="text-sm text-gray-600 mt-1">
                      {trigger.triggerType} ‚Ä¢ {trigger.conditions}
                    </p>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Badge className={getStatusColor(trigger.isActive)}>
                    {trigger.isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
                  </Badge>
                  <Button variant="outline" size="sm">
                    {trigger.isActive ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                  </Button>
                  <Button variant="outline" size="sm">
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
            
            <CardContent>
              <div className="space-y-4">
                {/* Message Preview */}
                <div className="p-3 bg-gray-50 rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">–®–∞–±–ª–æ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</p>
                  <p className="text-sm text-gray-900">{trigger.messageTemplate}</p>
                </div>
                
                {/* Statistics */}
                <div className="grid grid-cols-4 gap-4 pt-4 border-t">
                  <div className="text-center">
                    <p className="text-lg font-bold text-gray-900" data-testid={`trigger-sent-${trigger.id}`}>
                      {trigger.sentCount}
                    </p>
                    <p className="text-xs text-gray-600">–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                  </div>
                  <div className="text-center">
                    <p className="text-lg font-bold text-gray-900" data-testid={`trigger-open-rate-${trigger.id}`}>
                      {trigger.openRate}%
                    </p>
                    <p className="text-xs text-gray-600">–í—ñ–¥–∫—Ä–∏–≤–∞–Ω—ñ—Å—Ç—å</p>
                  </div>
                  <div className="text-center">
                    <p className="text-lg font-bold text-gray-900" data-testid={`trigger-click-rate-${trigger.id}`}>
                      {trigger.clickRate}%
                    </p>
                    <p className="text-xs text-gray-600">CTR</p>
                  </div>
                  <div className="text-center">
                    <p className="text-lg font-bold text-gray-900" data-testid={`trigger-conversion-${trigger.id}`}>
                      {trigger.conversionRate}%
                    </p>
                    <p className="text-xs text-gray-600">–ö–æ–Ω–≤–µ—Ä—Å—ñ—è</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Create Trigger Modal */}
      <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>
        <DialogContent className="max-w-2xl" data-testid="create-trigger-modal">
          <DialogHeader>
            <DialogTitle>–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç—Ä–∏–≥–µ—Ä</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="trigger-name">–ù–∞–∑–≤–∞ —Ç—Ä–∏–≥–µ—Ä–∞</Label>
              <Input
                id="trigger-name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç—Ä–∏–≥–µ—Ä–∞"
                data-testid="input-trigger-name"
              />
            </div>

            <div>
              <Label htmlFor="trigger-type">–¢–∏–ø —Ç—Ä–∏–≥–µ—Ä–∞</Label>
              <Select value={formData.triggerType} onValueChange={(value) => setFormData({ ...formData, triggerType: value })}>
                <SelectTrigger data-testid="select-trigger-type">
                  <SelectValue placeholder="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∏–≥–µ—Ä–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="No orders in 30 days">–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤</SelectItem>
                  <SelectItem value="High spender">–í–∏—Å–æ–∫—ñ –≤–∏—Ç—Ä–∞—Ç–∏</SelectItem>
                  <SelectItem value="New user">–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á</SelectItem>
                  <SelectItem value="Frequent customer">–ü–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="conditions">–£–º–æ–≤–∏ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è</Label>
              <Input
                id="conditions"
                value={formData.conditions}
                onChange={(e) => setFormData({ ...formData, conditions: e.target.value })}
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ > ‚Ç¥1000"
                data-testid="input-conditions"
              />
            </div>

            <div>
              <Label htmlFor="message-template">–®–∞–±–ª–æ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</Label>
              <Textarea
                id="message-template"
                value={formData.messageTemplate}
                onChange={(e) => setFormData({ ...formData, messageTemplate: e.target.value })}
                placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                rows={3}
                data-testid="textarea-message"
              />
            </div>

            <div>
              <Label htmlFor="channel">–ö–∞–Ω–∞–ª –≤—ñ–¥–ø—Ä–∞–≤–∫–∏</Label>
              <Select value={formData.channel} onValueChange={(value) => setFormData({ ...formData, channel: value })}>
                <SelectTrigger data-testid="select-channel">
                  <SelectValue placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Push">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è</SelectItem>
                  <SelectItem value="SMS">SMS</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <Button
                variant="outline"
                onClick={() => setShowCreateModal(false)}
                data-testid="btn-cancel-trigger"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button
                onClick={handleCreateTrigger}
                className="bg-uklon-yellow text-uklon-dark hover:bg-uklon-yellow/90"
                data-testid="btn-save-trigger"
              >
                –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç—Ä–∏–≥–µ—Ä
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}